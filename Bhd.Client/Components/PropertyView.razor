@using Direction = Bhd.Shared.Direction
@implements IDisposable

<MudCard Elevation="2">
    <MudCardHeader Class="pa-2">
        <CardHeaderContent>
            <MudText @onclick="CancelEdit" Align="Align.Center">@(PropertyName ?? _property.Name)</MudText>
        </CardHeaderContent>
    </MudCardHeader>

    @if (_property.Type == PropertyType.Choice && _property.Direction == Direction.Write) {
        <MudCardActions>
            <MudGrid Class="mx-1 mb-1 d-flex">
                @foreach (var option in _property.Choices) {
                    <MudButton Class="ma-1 flex-grow-1" Variant="Variant.Filled" Color="Color.Default" OnClick="() => SetTextValue(option)">@option</MudButton>
                }
            </MudGrid>
        </MudCardActions>
    } else if (_property.Type == PropertyType.Choice && _property.Direction == Direction.ReadWrite) {
        <MudCardActions >
            <MudGrid Class="mx-1 mb-1 d-flex">
                @foreach (var option in _property.Choices) {
                    <MudButton Class="ma-1 flex-grow-1" Variant="Variant.Filled" StartIcon="@(_property.TextValue == option ? Icons.Filled.Check : null)" Color="@(_property.TextValue == option ? Color.Primary : Color.Default)" OnClick="() => SetTextValue(option)">@option</MudButton>
                }
            </MudGrid>
        </MudCardActions>
    } else if ((_property.Type == PropertyType.Text | _property.Type == PropertyType.Number | _property.Type == PropertyType.Choice) && _property.Direction == Direction.Read) {
        <MudCardContent Class="pt-0 pb-5">
            @if (_property.Type == PropertyType.Number) {
                <MudText style="min-width: 144px;" Typo="Typo.h6" Align="Align.Center">@(_property.NumericValue + " " + _property.Unit)</MudText>
            } else if (_property.Type is PropertyType.Text or PropertyType.Choice) {
                <MudText style="min-width: 144px;" Typo="Typo.h6" Align="Align.Center">@_property.TextValue</MudText>
            } else {
                <MudText style="min-width: 144px;" Typo="Typo.h6" Align="Align.Center">Bybis</MudText>
            }
        </MudCardContent>
    } else if (_property.Type == PropertyType.Number && _property.Direction == Direction.ReadWrite) {
        <MudCardContent Class="pt-0 pb-5" hidden="@_isEditing">
            <MudText Align="Align.Center" @onclick="Edit">
                <MudLink style="min-width: 144px;" Typo="Typo.h6" Href="javascript:;"> @(_property.NumericValue + " " + _property.Unit)</MudLink>
            </MudText>
        </MudCardContent>

        <MudCardContent Class="pt-0 pb-3" hidden="@(!_isEditing)">
            <div>
                <MudGrid Class="d-flex" Justify="Justify.Center">
                    <MudItem Class="px-0">
                        <MudNumericField @ref="_targetNumericField" style="width: 100px;" OnKeyPress="HandleNudKeyPress" HideSpinButtons="false" Class="ma-0" Margin="Margin.Dense" Immediate="true" Label="New value" @bind-Value="_targetValue" Variant="Variant.Outlined"></MudNumericField>
                    </MudItem>

                    <MudItem Class="align-self-center px-0">
                        <MudButton OnClick="HandleSetButtonClick" Class="ml-1" Variant="Variant.Filled" Color="Color.Primary">SET</MudButton>
                    </MudItem>

                </MudGrid>

            </div>
        </MudCardContent>
    }


</MudCard>

@code {

    [Parameter]
    public string PropertyPath { get; set; }

    [Parameter]
    public string PropertyName { get; set; }

    [Inject]
    public NotificationsHub NotificationsHub { get; set; }

    [Inject]
    public HttpClient HttpClient { get; set; }

    public MudNumericField<double> _targetNumericField;

    private bool _isEditing = false;
    private double _targetValue = 0f;

    private Property _property = new Property();

    protected override Task OnInitializedAsync() {
        NotificationsHub.DevicePropertyChanged += HandleDevicePropertyChanged;
        return base.OnInitializedAsync();
    }

    private void HandleDevicePropertyChanged(string propertyPath) {
        if (propertyPath == PropertyPath) {
            Task.Run(async () => {
                await Refresh();
                StateHasChanged();
            });
        }
    }

    protected override async Task OnParametersSetAsync() {
        await Refresh();
    }


    private async Task Refresh() {
        _property = await HttpClient.GetFromJsonAsync<Property>(PropertyPath);
    }

    public void Dispose() {
        NotificationsHub.DevicePropertyChanged -= HandleDevicePropertyChanged;
    }

    private async Task SetTextValue(string valueToSet) {
        await HttpClient.PutAsJsonAsync($"{PropertyPath}/TextValue", valueToSet);
    }

    private async Task SetNumericValue(double valueToSet) {
        await HttpClient.PutAsJsonAsync($"{PropertyPath}/NumericValue", valueToSet);
    }

    private void CancelEdit() {
        _isEditing = false;
    }

    private void Edit() {
        _targetValue = _property.NumericValue;
        _isEditing = true;

        // Selecting text in the control after some time. Doesn't work if control is not yet visible ant it takes some time for visibilities to update.
        Task.Run(async () => {
            await Task.Delay(200);
            await _targetNumericField.SelectAsync();
        });
    }

    private async Task HandleSetButtonClick(MouseEventArgs obj) {
        await SetNumericValue(_targetValue);
        _isEditing = false;
    }

    private async Task HandleNudKeyPress(KeyboardEventArgs obj) {
        if (obj.Key == "Enter") {
            await SetNumericValue(_targetValue);
            _isEditing = false;
        }
    }

}