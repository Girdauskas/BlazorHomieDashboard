@page "/dashboards/{DashboardId}"
@implements IDisposable

@foreach (var node in _nodes) {
    <MudText Class="mb-2" Typo="Typo.h6" Color="Color.Primary">@node.Name</MudText>

    <MudGrid Class="my-1 d-flex">
        @foreach (var property in node.Properties) {
            <MudItem Class="pa-1 flex-grow-1">
                <PropertyView PropertyName="@property.AlternativeName" PropertyPath="@property.ActualPropertyPath"></PropertyView>
            </MudItem>
        }
    </MudGrid>
}

<MudButton>Edit</MudButton>

@code {

    [Parameter]
    public string DashboardId { get; set; }

    [Inject]
    private HttpClient HttpClient { get; set; }

    [Inject]
    private PageHeaderService PageHeaderService { get; set; }

    [Inject]
    private NotificationsHub NotificationsHub { get; set; }

    private Dashboard _dashboard = new();
    private List<DashboardNode> _nodes = new();

    protected override async Task OnInitializedAsync() {
        NotificationsHub.DashboardConfigurationChanged += HandleDashboardConfigurationChanged;
        await base.OnInitializedAsync();
    }

    private void HandleDashboardConfigurationChanged() {
        Task.Run(async () => {
            await LoadDashboard();
            await LoadNodes();
            StateHasChanged();
        });
    }

    protected override async Task OnParametersSetAsync() {
        await LoadDashboard();
        await LoadNodes();
        PageHeaderService.CurrentPageTitle = $"/ Dashboards / {_dashboard.Name}";
        await base.OnParametersSetAsync();
    }

    private async Task LoadDashboard() {
        _dashboard = await HttpClient.GetFromJsonAsync<Dashboard>($"api/dashboards/{DashboardId}");
    }

    private async Task LoadNodes() {
        _nodes = await HttpClient.GetFromJsonAsync<List<DashboardNode>>($"api/dashboards/{DashboardId}/nodes");
    }

    public void Dispose() {
        NotificationsHub.DashboardConfigurationChanged -= HandleDashboardConfigurationChanged;
    }
}