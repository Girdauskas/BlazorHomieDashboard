@using System.ComponentModel
@implements IDisposable

<RadzenCard>
    @if (Data.Type == PropertyType.State) {
        <h4>@Data.Name</h4>
        <h2 class="text-center">@Data.Value.ToString("F2") @Data.Unit</h2>
    } else {
        <div>
            <h4>@Data.Name</h4>
            <a href="javascript:;" @onclick="Edit">
                <h2 class="text-center" hidden="@_isEditing">@Data.Value.ToString("F2") @Data.Unit</h2>
            </a>
        </div>

        <div class="input-group justify-content-center" hidden="@(!_isEditing)">
            <RadzenNumeric ShowUpDown="true" TValue="float" @bind-Value=@_targetValue Placeholder="" Format="F2"/>
            <RadzenButton Text="SET" Click="SetTargetValue"></RadzenButton>
        </div>
    }

</RadzenCard>

@code {

    [Parameter]
    public ClientNumberProperty Data { get; set; }

    private bool _isEditing;

    private float _targetValue;

    private void Edit() {
        _targetValue = Data.Value;
        _isEditing = !_isEditing;
        StateHasChanged();
    }

    protected override void OnInitialized() {
        Data.PropertyChanged += HandleDataPropertyChanged;
        base.OnInitialized();
    }


    private void HandleDataPropertyChanged(object sender, PropertyChangedEventArgs e) {
        if (e.PropertyName == nameof(ClientNumberProperty.Value)) {
            StateHasChanged();
        }
    }

    void IDisposable.Dispose() {
        Data.PropertyChanged -= HandleDataPropertyChanged;
    }

    private void SetTargetValue() {
        Data.Value = _targetValue;
        _isEditing = false;
        StateHasChanged();
    }


}