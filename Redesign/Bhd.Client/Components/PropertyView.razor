@using Direction = Bhd.Shared.Direction
@implements IDisposable

<MudCard Elevation="2">
    <MudCardHeader Class="pa-2">
        <CardHeaderContent>
            <MudText Align="Align.Center">@Property.Name</MudText>
        </CardHeaderContent>
    </MudCardHeader>

    @if (Property.Type == PropertyType.Choice && Property.Direction == Direction.Write) {
        <MudCardActions>
            <MudGrid Class="mx-1 mb-1 d-flex">
                @foreach (var option in Property.Choices) {
                    <MudButton Class="ma-1 flex-grow-1" Variant="Variant.Filled" Color="Color.Default" OnClick="() => SetTextValue(option)">@option</MudButton>
                }
            </MudGrid>
        </MudCardActions>
    } else {
        <MudCardContent Class="pt-0 pb-5">
            @if (Property.Type == PropertyType.Number) {
                <MudText style="min-width: 144px;" Typo="Typo.h6" Align="Align.Center">@(Property.NumericValue.ToString(Property.Format) + " " + Property.Unit)</MudText>
            } else if (Property.Type is PropertyType.Text or PropertyType.Choice) {
                <MudText style="min-width: 144px;" Typo="Typo.h6" Align="Align.Center">@Property.TextValue</MudText>
            } else {
                <MudText style="min-width: 144px;" Typo="Typo.h6" Align="Align.Center">Bybis</MudText>
            }
        </MudCardContent>
    }


</MudCard>

@code {

    [Parameter]
    public Property Property { get; set; }

    [Inject]
    public NotificationsHub NotificationsHub { get; set; }

    [Inject]
    public HttpClient HttpClient { get; set; }

    protected override Task OnInitializedAsync() {
        NotificationsHub.DevicePropertyChanged += HandleDevicePropertyChanged;
        return base.OnInitializedAsync();
    }

    private void HandleDevicePropertyChanged(string propertyPath) {
        if (propertyPath == Property.Path) {
            Task.Run(async () => {
                await Refresh();
                StateHasChanged();
            });
        }
    }


    private async Task Refresh() {
        Property = await HttpClient.GetFromJsonAsync<Property>($"api/{Property.Path}");
    }

    public void Dispose() {
        Console.WriteLine("Disposing " + Property.Path);
        NotificationsHub.DevicePropertyChanged -= HandleDevicePropertyChanged;
    }

    private async Task SetTextValue(string valueToSet) {
        await HttpClient.PutAsJsonAsync($"api/{Property.Path}/TextValue", valueToSet);
    }

}